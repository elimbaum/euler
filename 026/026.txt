Find the value of d < 1000 for which 1/d has the longest recurring cycle.

Repeating decimals can be found by taking the repeating part over 99...999.

This doesn't account for non-repeating parts at the beginning, but these only arise (I believe) when base repeating decimals are multiplied by either 2 or 5. For example, 1/3 = 0.3... but 1/6 = 0.16...

From this, I propose that d must not be divisible by 2 or 5, for these numbers will have finite components, and will not be longer than when they are multiplied by 2 or 5.

I also know that this repeating decimal must be an integer over a string of 9s, where the length of the string of 9s is equal to the length of the repeating portion of 1/d.

Furthermore, because this needs to be a unit fraction, I need to only check d such that d is a divisor of 99...99. Rather than trying to compute a list of all such numbers, I can just do a mod test on each n.

Also: multiplying a unit fraction by an integer doesn't increase the cycle length, which means that d must be prime (to be the lowest).

For example, both 1/21 and 1/7 (3 * 1/21) have a cycle of length 6.

Other thinking: if d is less than 500, it must have a corresponding fraction 1/(2d) which has the same length (this goes hand-in-hand with the previous assertion). Because I am looking for the longest, not one of the longest...

d must be greater than 500, and prime. W|A informs me that there are only 73 primes between 500 and 1000... I'lll have to find them but this should go well.

So now, how to find the cycle length?

I can't accurately express numbers of the form 10^100-1, which may be on the order of the length of the repeating part (or greater)!

Currently trying to factor strings of 1s (as they're just strings of 9 divided by 9), i.e. 11111111. Every other one (I believe those with an odd number of digits) are divisible by 11, but other than that I see little pattern in their prime factors. Those which do not have 11 as a prime factor may have VERY large prime factors... and the number with 19 ones is a *prime number itself*! yikes.

And I can be nearly certain that the longest repeating cycle will be a bit longer than 20 digits...

THERE MUST BE A BETTER WAY!

And there is, for just $19.99!



After some research: the length of the repeating part of 1/d = ord_10(d)
where ord_a(b) is the multiplicative order, or some number c such that a^c mod b = 1
So simplifying... I am looking to maximize c such that 10^c mod d = 1

I should just have to loop through d, and then loop through each c and check if equals 1.
Interesting... I was looking for strings of 9999, which are 1 away from 10^n

Ahh... through some fancy not-yet-learned modular arithmetic:
10^c mod d = 1
10^c mod d - 1 = 0
(10^c - 1) mod d = 0
^ this part is all 9s... so I get what I wanted, but a little easier?
Still have to compute very large order mods, 10^100 or so.
Python can probably deal with it, but that's not very nice.


So in that case I probably need to implement my own long division algorithm, and watch out for repetition in the values of variables.