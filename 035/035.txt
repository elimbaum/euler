Euler 35
Circular Primes

How many circular primes are there below one million?


Neglecting 2 and 5, all other circular primes may not contain the digits 0, 2, 4, 5, 6, or 8. These digits guarantee divisibility by 2, 5, or 10.

So I am looking for permutations of {1, 3, 7, 9} which are circular primes and are less than 1 million, and 2 and 5.

I can use a sieve to create a list of primes < 1000000. Then it should be quick work to check for the circular ones.

How do I create all permutations of {1, 3, 7, 9} from length (in digits) of 1 to 6?

I *could* use arrays. But that might be slow and annoying, especially when converting to a number.

Maybe I could start off using numbers:
lastDigit = n % 10
n //= 10
n += 10 * lastDigit * floor(log10(n))

That should rotate it. Fast? Don't know. Maybe I could try it with arrays as well.

The answer - 55 - is surprisingly low! Trying out some optimizations from the forum, as it currently takes ~1.9s in python. Yikes! The sieve itself takes about half of that time.

My sieve of Eratosthenes wasn't great... shit that sped it up a lot. Only check non-primes, start at n^2, don't check evens (not necessary in this case because the digits function takes care of the evens).

Just under a second. Granted, that's not in a benchmark loop.

Oddly enough, the alreadyChecked array hardly speeds things up (but it is required to get the correct answer)

This seems to be a slow one, from the forum. Most people (even more recently) have > 1sec runtimes, except for C and friends. Currently hovering around 1 sec for me.

AHH! Simple mod checks brought it down to 500ms. Ending here.
