Project Euler 018

Maximum Path Sum I

The example triangle:

3
7 4
2 4 6
8 5 9 3

The maximum path is 3+7+4+9 = 23.


The large triangle:

75
95 64
17 47 82
18 35 87 10
20 04 82 47 65
19 01 23 75 03 34
88 02 77 73 07 63 67
99 65 04 28 06 16 70 92
41 41 26 56 83 40 80 70 33
41 48 72 33 47 32 37 16 94 29
53 71 44 65 25 43 91 52 97 51 14
70 11 33 28 77 73 17 78 39 68 17 57
91 71 52 38 17 14 91 43 58 50 27 29 48
63 66 04 68 89 53 67 30 73 16 69 87 40 31
04 62 98 27 23 09 70 98 73 93 38 53 60 04 23



For each row, the options are to move directly down or move to the left.

The problem statement mentions that brute-forcing this problem is possible but not advised; a later problem is the same but with a 100-row triangle.

There are 15 rows (but only 14 binary decisions need to be made).


So what is the efficient algorithm?


+ I am going to ignore to 00-99 assumed range. It should be a general algorithm. Either way, the algorithm shouldn't be too different.
+ Absolutely every number needs to be read.
+ Ordering must be ignored... there is no special order in the triangle. i.e. single rows/columns cannot be isolated.
+ Total count: 120 numbers.

+ Possibly this: find the largest numbers and try to fit them into one path. Of course smaller numbers could still work, i.e. a path of ten 5s versus a path of one 9 and one 8, the rest 1s. In the example, such an algorithm would find the 6, 7, 8, 9; only paths involving these (as many of them as possible) would need to be tested), at first... not completely fool proof.

+ what if each row was sorted into another array... but where from there? Only allow continue if indices matched up (either = or +1).


Nope â€“ dynamic programming. run through, top to bottom, and maximize paths. only need to check each position once.